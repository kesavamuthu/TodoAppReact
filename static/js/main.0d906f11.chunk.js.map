{"version":3,"sources":["Input.js","List.js","BottomItems.js","ToDo.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","inputRef","React","createRef","tmp","value","Form","Control","size","type","placeholder","ref","this","onKeyDown","event","console","log","current","trim","keyCode","undefined","index","onSave","replace","style","display","width","Component","List","listItems","task","map","e","i","isDeleted","ListGroup","Item","action","key","date","id","className","status","InputGroup","Prepend","Container","Row","Col","xs","Radio","aria-label","name","onClick","onUpdate","onChangeStatus","onDelete","BottomItems","buttons","arr","Button","variant","onChangeTab","margin","Alert","textAlign","Badge","count","selectedTab","ToDo","changeTab","listsTmp","Number","target","lists","state","prev","filter","setState","save","bind","changeStatus","delete","update","counter","push","Date","getTime","localStorage","setItem","JSON","stringify","getItem","parse","updateValue","updateIndex","forEach","Accordion","defaultActiveKey","Toggle","as","eventKey","Collapse","refs","App","sm","font","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0d906f11.chunk.js","sourcesContent":["import React from \"react\";\nimport { Form } from \"react-bootstrap\";\n\nclass Input extends React.Component {\n  constructor(props) {\n    super(props);\n    this.inputRef = React.createRef();\n    this.tmp = this.props.value;\n  }\n\n  render() {\n    return (\n      <>\n        <Form.Control\n          size=\"lg\"\n          type=\"text\"\n          placeholder=\"What needs to be done ?\"\n          ref={this.inputRef}\n          value={this.tmp}\n          onKeyDown={(event) => {\n            console.log(this.props, this.inputRef.current.value.trim());\n            if (\n              this.inputRef.current.value &&\n              event.keyCode === 13 &&\n              this.props.index === undefined\n            ) {\n              this.props.onSave(this.inputRef.current.value.trim());\n              this.inputRef.current.value = \"\";\n            } else if (event.keyCode === 13 && this.props.index) {\n              this.props.replace(\n                this.inputRef.current.value.trim(),\n                this.props.index\n              );\n              this.inputRef.current.value = \"\";\n            }\n          }}\n          style={{ display: \"inline\", width: \"94%\" }}\n        />\n      </>\n    );\n  }\n}\n\nexport default Input;\n","import React from \"react\";\nimport { ListGroup, InputGroup, Container } from \"react-bootstrap\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { FaBeer } from \"react-icons/fa\";\n\nfunction List(props) {\n  const listItems = props.task.map((e, i) => {\n    if (e.task && !e.isDeleted)\n      return (\n        <ListGroup.Item\n          action\n          key={e.date}\n          id={i}\n          className={e.status ? \"strike\" : undefined}\n        >\n          <InputGroup.Prepend>\n            <Container>\n              <Row>\n                <Col xs={1.5}>\n                  <InputGroup.Radio\n                    aria-label=\"Radio button for following text input\"\n                    name=\"what\"\n                    onClick={() => props.onUpdate(i)}\n                  />\n                </Col>\n                <Col onClick={() => props.onChangeStatus(i)}>{e.task}</Col>\n                <Col xs={1}>\n                  <FaBeer onClick={() => props.onDelete(i)} />\n                </Col>\n              </Row>\n            </Container>\n          </InputGroup.Prepend>\n        </ListGroup.Item>\n      );\n  });\n  return <ListGroup>{listItems}</ListGroup>;\n}\n\nexport default List;\n","import React from \"react\";\nimport { Alert, Button, Badge } from \"react-bootstrap\";\n\nfunction BottomItems(props) {\n  const buttons = props.arr.map((e, i) => (\n    <Button\n      key={i}\n      id={i}\n      variant=\"light\"\n      value={e}\n      onClick={props.onChangeTab}\n      style={{ margin: \"0px 10px\" }}\n    >\n      {e}\n    </Button>\n  ));\n  return (\n    <Alert variant=\"light\" style={{ textAlign: \"center\" }}>\n      <Badge className={\"bottomPositionForSpan\"}>\n        {props.count +\n          (props.selectedTab === 2 ? \" items completed\" : \" items left\")}\n      </Badge>\n      {buttons}\n    </Alert>\n  );\n}\n\nexport default BottomItems;\n","import React from \"react\";\nimport Input from \"./Input\";\nimport List from \"./List\";\nimport BottomItems from \"./BottomItems\";\nimport { FaSlidersH } from \"react-icons/fa\";\nimport { Button, Accordion } from \"react-bootstrap\";\n\nclass ToDo extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      lists: [],\n      prev: [],\n      isDeleted: \"\",\n    };\n    this.save = this.save.bind(this);\n    this.changeStatus = this.changeStatus.bind(this);\n    this.delete = this.delete.bind(this);\n    this.update = this.update.bind(this);\n    this.replace = this.replace.bind(this);\n    this.counter = this.counter.bind(this);\n  }\n\n  async save(value) {\n    const tmp = this.state.prev;\n    tmp.push({ task: value, status: \"\", date: new Date().getTime() });\n    await this.setState({\n      lists: [...tmp],\n      prev: [...tmp],\n    });\n    localStorage.setItem(\"all tasks\", JSON.stringify(this.state));\n  }\n\n  changeTab = (event) => {\n    const id = Number(event.target.id);\n    const lists = this.state.prev.map((e) => {\n      return { ...e };\n    }); //to avoid mutating object\n    let listsTmp;\n    this.selectedTab = 0;\n    if (!lists) return;\n    switch (id) {\n      case 1:\n        listsTmp = lists.filter((e) => !e.status);\n        this.setState({\n          lists: listsTmp,\n          prev: this.state.prev,\n        });\n        break;\n      case 2:\n        listsTmp = lists.filter((e) => e.status);\n        if (!listsTmp) return;\n        listsTmp = listsTmp.map((e) => {\n          e.status = false;\n          return e;\n        });\n        this.setState({\n          lists: [...listsTmp],\n          prev: this.state.prev,\n        });\n        this.selectedTab = 2;\n        break;\n      default:\n        this.setState({\n          lists: this.state.prev,\n          prev: this.state.prev,\n        });\n    }\n  };\n  changeStatus(index) {\n    const tmp = this.state.lists;\n    tmp[index].status = !tmp[index].status;\n    this.setState({\n      lists: [...tmp],\n      prev: tmp,\n    });\n    localStorage.setItem(\"all tasks\", JSON.stringify(this.state));\n  }\n\n  componentDidMount() {\n    if (localStorage.getItem(\"all tasks\")) {\n      this.setState(JSON.parse(localStorage.getItem(\"all tasks\")));\n    }\n  }\n\n  delete(index) {\n    let tmp = this.state.prev;\n    tmp[index].isDeleted = true;\n    this.setState({\n      lists: [...tmp],\n      prev: [...tmp],\n    });\n    localStorage.setItem(\"all tasks\", JSON.stringify(this.state));\n  }\n\n  update(index) {\n    let tmp = this.state.prev;\n    this.updateValue = tmp[index].task;\n    this.updateIndex = index;\n    this.setState({\n      lists: [...this.state.lists],\n      prev: [...this.state.lists],\n    });\n  }\n\n  async replace(value, index) {\n    console.log(\"in replace method\");\n    let tmp = this.state.prev;\n    tmp[index].task = value;\n    this.updateValue = undefined;\n    this.updateIndex = undefined;\n    await this.setState({\n      lists: [...tmp],\n      prev: [...tmp],\n    });\n    localStorage.setItem(\"all tasks\", JSON.stringify(this.state));\n  }\n\n  counter() {\n    this.count = 0;\n    this.state.lists.forEach((e) => {\n      if (!e.status && !e.isDeleted) this.count++;\n    });\n  }\n\n  render() {\n    this.counter();\n    console.log(this.updateValue);\n    return (\n      <>\n        <div className=\"shadow-lg\">\n          <Accordion defaultActiveKey=\"0\">\n            <Accordion.Toggle\n              as={Button}\n              variant=\"link\"\n              eventKey=\"0\"\n              style={{ display: \"inline-block\" }}\n            >\n              <FaSlidersH />\n            </Accordion.Toggle>\n            <Input\n              onSave={this.save}\n              value={this.updateValue}\n              index={this.updateIndex}\n              replace={this.replace}\n            />\n            <Accordion.Collapse eventKey=\"0\">\n              <List\n                task={this.state.lists}\n                onChangeStatus={this.changeStatus}\n                onDelete={this.delete}\n                onUpdate={this.update}\n              />\n            </Accordion.Collapse>\n            <BottomItems\n              arr={[\"All\", \"Active\", \"Completed\"]}\n              onChangeTab={this.changeTab}\n              refs={this.refs}\n              count={this.count}\n              selectedTab={this.selectedTab}\n            />\n          </Accordion>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default ToDo;\n","// import React, { Component } from \"react\";\n// import logo from \"./logo.svg\";\n// import \"./App.css\";\n\n// class App extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = { apiResponse: \"\" };\n//   }\n\n//   callApi() {\n//     fetch(\"http://localhost:9000/testAPI\")\n//       .then((res) => res.text())\n//       .then((res) => this.setState({ apiResponse: res }))\n//       .catch((err) => err);\n//   }\n\n//   componentDidMount() {\n//     setTimeout(this.callApi(), 10000);\n//   }\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//           <h1 className=\"App-title\">Welcome to React</h1>\n//           <p className=\"App-intro\">hello {this.state.apiResponse}</p>\n//         </header>\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n\n/**                                                          */\n\nimport React from \"react\";\nimport \"./App.css\";\nimport { Container, Row, Col, Alert } from \"react-bootstrap\";\nimport ToDo from \"./ToDo\";\nfunction App() {\n  return (\n    <>\n      <Container>\n        <Row>\n          <Col sm={2} />\n          <Col sm={8}>\n            <h1 style={{ textAlign: \"center\", font: \"oblique normal 1.6em\" }}>\n              todos\n            </h1>\n            <ToDo />\n          </Col>\n          <Col sm={2}></Col>\n        </Row>\n      </Container>\n    </>\n  );\n}\n\nfunction what() {\n  alert(\"hai\");\n}\n\nfunction Alerts() {\n  return [\n    \"primary\",\n    \"secondary\",\n    \"success\",\n    \"danger\",\n    \"warning\",\n    \"info\",\n    \"light\",\n    \"dark\",\n  ].map((variant, idx) => (\n    <Alert key={idx} variant={variant}>\n      This is a {variant} alert—check it out!\n    </Alert>\n  ));\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n// setInterval(tick, 1000);\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n// ReactDOM.render(<Clock />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}